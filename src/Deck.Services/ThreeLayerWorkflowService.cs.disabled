using System.Text.Json;
using Deck.Core.Interfaces;
using Deck.Core.Models;
using Microsoft.Extensions.Logging;

namespace Deck.Services;

/// <summary>
/// 三层配置工作流程服务实现
/// 基于deck-shell的三层配置管理系统：Templates、Custom、Images
/// </summary>
public class ThreeLayerWorkflowService : IThreeLayerWorkflowService
{
    private readonly ILogger<ThreeLayerWorkflowService> _logger;
    private readonly IDirectoryManagementService _directoryService;
    private readonly IFileSystemService _fileSystemService;
    private readonly IInteractiveSelectionService _interactiveService;
    private readonly IContainerService _containerService;

    private static readonly string[] RequiredConfigFiles = { ".env", "compose.yaml", "Dockerfile" };
    private static readonly string[] RuntimeVariables = 
    {
        "DEV_PORT", "DEBUG_PORT", "PROJECT_NAME", 
        "WORKSPACE_PATH", "CONTAINER_NAME", "NETWORK_NAME", "VOLUME_PREFIX"
    };

    public ThreeLayerWorkflowService(
        ILogger<ThreeLayerWorkflowService> logger,
        IDirectoryManagementService directoryService,
        IFileSystemService fileSystemService,
        IInteractiveSelectionService interactiveService,
        IContainerService containerService)
    {
        _logger = logger;
        _directoryService = directoryService;
        _fileSystemService = fileSystemService;
        _interactiveService = interactiveService;
        _containerService = containerService;
    }

    /// <inheritdoc />
    public async Task<WorkflowExecutionResult> ExecuteTemplateWorkflowAsync(string templateName, string envType)
    {
        _logger.LogInformation("开始执行Templates工作流程: {TemplateName}, 环境: {EnvType}", templateName, envType);

        var result = new WorkflowExecutionResult
        {
            WorkflowType = WorkflowType.CreateEditableConfig,
            Success = false
        };

        try
        {
            // 显示双工作流程选择
            var workflowType = await _interactiveService.ShowWorkflowSelectionAsync();
            result.WorkflowType = workflowType;

            if (workflowType == WorkflowType.CreateEditableConfig)
            {
                // 工作流程1：创建可编辑配置（Templates → Custom）
                await ShowWorkflowProgressAsync(1, 1, $"将模板 {templateName} 复制到 Custom 目录");
                
                var customName = _directoryService.GenerateUniqueCustomName(templateName);
                var templateDir = _directoryService.GetTemplateDirectory(templateName);
                
                if (await _directoryService.CreateCustomFromTemplateAsync(templateName, customName, envType))
                {
                    result.Success = true;
                    result.IsComplete = false; // 用户需要编辑后再运行
                    result.CustomConfigName = customName;
                    result.Messages.Add($"✅ 已创建可编辑配置: {customName}");
                    result.Messages.Add($"💡 请编辑配置后使用 'deck start {customName}' 命令启动");
                    
                    _logger.LogInformation("Templates工作流程完成 (可编辑模式): {CustomName}", customName);
                }
            }
            else
            {
                // 工作流程2：直接构建启动（Templates → Custom → Images → 构建）
                await ExecuteDirectBuildWorkflowAsync(templateName, envType, result);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Templates工作流程执行失败: {TemplateName}", templateName);
            result.Errors.Add($"工作流程执行失败: {ex.Message}");
        }

        return result;
    }

    /// <inheritdoc />
    public async Task<CustomWorkflowResult> ExecuteCustomConfigWorkflowAsync(string configName)
    {
        _logger.LogInformation("开始执行Custom配置工作流程: {ConfigName}", configName);

        var result = new CustomWorkflowResult();

        try
        {
            var customDir = _directoryService.GetCustomConfigPath(configName);
            
            // 验证配置目录存在
            if (!_fileSystemService.DirectoryExists(customDir))
            {
                result.ErrorMessage = $"配置目录不存在: {customDir}";
                _logger.LogError("配置目录不存在: {CustomDir}", customDir);
                return result;
            }

            // 验证配置完整性
            var configState = await ValidateConfigurationStateAsync(customDir);
            if (!configState.IsValid)
            {
                result.ErrorMessage = $"配置不完整，缺少文件: {string.Join(", ", configState.MissingFiles)}";
                return result;
            }

            await ShowWorkflowProgressAsync(1, 2, "验证Custom配置完整性");

            // 生成带时间戳的镜像名
            var imageName = _directoryService.GenerateTimestampedImageName(configName);
            result.ImageName = imageName;

            await ShowWorkflowProgressAsync(2, 2, $"创建Images目录并构建镜像: {imageName}");

            // Custom → Images：复制配置到Images目录
            var imageDir = await _directoryService.CreateImageFromCustomAsync(imageName, customDir);
            
            // 构建并启动容器
            var containerResult = await _containerService.BuildAndStartContainerAsync(imageDir);
            if (containerResult.Success)
            {
                result.Success = true;
                result.ContainerName = containerResult.ContainerName;
                result.Messages.Add($"✅ 已从配置 {configName} 构建镜像: {imageName}");
                result.Messages.Add($"🚀 容器已启动: {containerResult.ContainerName}");

                // 更新镜像元数据
                var metadata = new ImageMetadata
                {
                    ImageName = imageName,
                    CreatedAt = DateTime.UtcNow,
                    CreatedBy = Environment.UserName,
                    SourceConfig = customDir,
                    BuildStatus = BuildStatus.Completed,
                    LastStarted = DateTime.UtcNow
                };
                await UpdateImageMetadataAsync(imageDir, metadata);
            }
            else
            {
                result.ErrorMessage = $"容器构建失败: {containerResult.ErrorMessage}";
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Custom配置工作流程执行失败: {ConfigName}", configName);
            result.ErrorMessage = $"工作流程执行失败: {ex.Message}";
        }

        return result;
    }

    /// <inheritdoc />
    public async Task<ImagesWorkflowResult> ExecuteImagesWorkflowAsync(string imageName)
    {
        _logger.LogInformation("开始执行Images工作流程: {ImageName}", imageName);

        var result = new ImagesWorkflowResult
        {
            ImageName = imageName
        };

        try
        {
            var containerName = $"deck_{imageName}";
            result.ContainerName = containerName;

            // 步骤1：检查容器状态
            var containerStatus = await _containerService.GetContainerStatusAsync(containerName);
            
            switch (containerStatus)
            {
                case ContainerStatus.Running:
                    // 容器运行中 → 直接进入
                    result.Action = ContainerAction.Enter;
                    await _containerService.EnterContainerAsync(containerName);
                    result.Success = true;
                    result.Messages.Add($"🔗 已进入运行中的容器: {containerName}");
                    break;

                case ContainerStatus.Exited:
                    // 容器停止 → 重新启动
                    result.Action = ContainerAction.Restart;
                    var restartResult = await _containerService.StartExistingContainerAsync(containerName);
                    result.Success = restartResult.Success;
                    if (restartResult.Success)
                    {
                        result.Messages.Add($"🔄 已重启容器: {containerName}");
                    }
                    else
                    {
                        result.ErrorMessage = $"重启容器失败: {restartResult.ErrorMessage}";
                    }
                    break;

                case ContainerStatus.NotFound:
                    // 检查镜像是否存在
                    var imageExists = await _containerService.ImageExistsAsync(imageName);
                    
                    if (imageExists)
                    {
                        // 镜像存在 → 创建并启动容器
                        result.Action = ContainerAction.CreateAndStart;
                        var createResult = await _containerService.CreateAndStartContainerAsync(imageName);
                        result.Success = createResult.Success;
                        if (createResult.Success)
                        {
                            result.Messages.Add($"🚀 已创建并启动新容器: {containerName}");
                        }
                        else
                        {
                            result.ErrorMessage = $"创建容器失败: {createResult.ErrorMessage}";
                        }
                    }
                    else
                    {
                        // 镜像不存在 → 构建、创建并启动
                        result.Action = ContainerAction.BuildAndStart;
                        var imageDir = _directoryService.GetImageDirectory(imageName);
                        var buildResult = await _containerService.BuildAndStartContainerAsync(imageDir);
                        result.Success = buildResult.Success;
                        if (buildResult.Success)
                        {
                            result.Messages.Add($"🏗️ 已构建镜像并启动容器: {containerName}");
                        }
                        else
                        {
                            result.ErrorMessage = $"构建镜像失败: {buildResult.ErrorMessage}";
                        }
                    }
                    break;

                default:
                    result.ErrorMessage = $"未知的容器状态: {containerStatus}";
                    break;
            }

            // 更新镜像元数据
            if (result.Success && result.Action != ContainerAction.Enter)
            {
                var imageDir = _directoryService.GetImageDirectory(imageName);
                var metadata = await ReadImageMetadataAsync(imageDir);
                if (metadata != null)
                {
                    metadata.LastStarted = DateTime.UtcNow;
                    await UpdateImageMetadataAsync(imageDir, metadata);
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Images工作流程执行失败: {ImageName}", imageName);
            result.ErrorMessage = $"工作流程执行失败: {ex.Message}";
        }

        return result;
    }

    /// <inheritdoc />
    public async Task<ConfigurationStateResult> ValidateConfigurationStateAsync(string configPath)
    {
        var result = new ConfigurationStateResult();

        try
        {
            if (!_fileSystemService.DirectoryExists(configPath))
            {
                result.Status = ConfigValidationStatus.NotFound;
                result.ErrorMessage = $"配置目录不存在: {configPath}";
                return result;
            }

            var missingFiles = new List<string>();
            
            foreach (var requiredFile in RequiredConfigFiles)
            {
                var filePath = Path.Combine(configPath, requiredFile);
                if (!_fileSystemService.FileExists(filePath))
                {
                    missingFiles.Add(requiredFile);
                }
            }

            result.MissingFiles = missingFiles;
            result.IsValid = missingFiles.Count == 0;
            result.Status = result.IsValid ? ConfigValidationStatus.Complete : ConfigValidationStatus.Incomplete;

            if (result.IsValid)
            {
                // 进一步验证compose.yaml语法
                await ValidateComposeFileAsync(Path.Combine(configPath, "compose.yaml"), result);
            }

            _logger.LogDebug("配置验证结果: {ConfigPath}, 有效: {IsValid}, 缺少文件: {MissingFiles}", 
                configPath, result.IsValid, string.Join(", ", missingFiles));
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "配置验证失败: {ConfigPath}", configPath);
            result.Status = ConfigValidationStatus.Invalid;
            result.ErrorMessage = $"配置验证失败: {ex.Message}";
        }

        return result;
    }

    /// <inheritdoc />
    public async Task UpdateImageMetadataAsync(string imageDir, ImageMetadata metadata)
    {
        try
        {
            var metadataFile = Path.Combine(imageDir, ".deck-metadata");
            var json = JsonSerializer.Serialize(metadata, new JsonSerializerOptions 
            { 
                WriteIndented = true 
            });
            
            await _fileSystemService.WriteTextFileAsync(metadataFile, json);
            _logger.LogDebug("已更新镜像元数据: {ImageDir}", imageDir);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "更新镜像元数据失败: {ImageDir}", imageDir);
        }
    }

    /// <inheritdoc />
    public async Task<ImageMetadata?> ReadImageMetadataAsync(string imageDir)
    {
        try
        {
            var metadataFile = Path.Combine(imageDir, ".deck-metadata");
            if (!_fileSystemService.FileExists(metadataFile))
            {
                return null;
            }

            var json = await _fileSystemService.ReadTextFileAsync(metadataFile);
            return JsonSerializer.Deserialize<ImageMetadata>(json);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "读取镜像元数据失败: {ImageDir}", imageDir);
            return null;
        }
    }

    /// <inheritdoc />
    public async Task<List<string>> GenerateConfigurationChainAsync(string? templateName = null, string? customName = null, string? imageName = null)
    {
        var chain = new List<string>();

        try
        {
            if (!string.IsNullOrEmpty(templateName))
            {
                chain.Add($"📋 Templates: {templateName}");
            }

            if (!string.IsNullOrEmpty(customName))
            {
                chain.Add($"🔧 Custom: {customName}");
                
                // 尝试找到源模板
                if (string.IsNullOrEmpty(templateName))
                {
                    var customDir = _directoryService.GetCustomConfigPath(customName);
                    // 这里可以从元数据或命名约定推断源模板
                    chain.Insert(0, "📋 Templates: (推断源)");
                }
            }

            if (!string.IsNullOrEmpty(imageName))
            {
                chain.Add($"📦 Images: {imageName}");
                
                // 尝试读取镜像元数据获取源配置信息
                var imageDir = _directoryService.GetImageDirectory(imageName);
                var metadata = await ReadImageMetadataAsync(imageDir);
                if (metadata?.SourceConfig != null && string.IsNullOrEmpty(customName))
                {
                    var sourceCustomName = Path.GetFileName(metadata.SourceConfig);
                    chain.Insert(-1, $"🔧 Custom: {sourceCustomName}");
                }
            }

            if (chain.Count > 1)
            {
                // 添加箭头连接
                for (int i = 0; i < chain.Count - 1; i++)
                {
                    chain[i] += " → ";
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "生成配置链路失败");
            chain.Add("⚠️  配置链路生成失败");
        }

        return chain;
    }

    /// <inheritdoc />
    public async Task ShowWorkflowProgressAsync(int currentStep, int totalSteps, string stepDescription)
    {
        var progressMessage = $"[步骤 {currentStep}/{totalSteps}] {stepDescription}";
        _logger.LogInformation("工作流程进度: {ProgressMessage}", progressMessage);
        
        // 这里可以集成到控制台显示服务中
        Console.WriteLine($"🚀 {progressMessage}");
        
        // 添加短暂延时以提供更好的用户体验
        await Task.Delay(500);
    }

    /// <summary>
    /// 执行直接构建工作流程
    /// Templates → Custom → Images → 构建
    /// </summary>
    private async Task ExecuteDirectBuildWorkflowAsync(string templateName, string envType, WorkflowExecutionResult result)
    {
        await ShowWorkflowProgressAsync(1, 3, $"步骤 1/3: 从模板 {templateName} 创建临时配置");
        
        // Step 1: Templates → Custom
        var customName = _directoryService.GenerateTimestampedName($"{templateName}-temp");
        if (!await _directoryService.CreateCustomFromTemplateAsync(templateName, customName, envType))
        {
            result.Errors.Add("创建临时配置失败");
            return;
        }

        await ShowWorkflowProgressAsync(2, 3, $"步骤 2/3: 创建镜像目录");
        
        // Step 2: Custom → Images  
        var imageName = _directoryService.GenerateImageName(customName);
        var customDir = _directoryService.GetCustomConfigPath(customName);
        var imageDir = await _directoryService.CreateImageFromCustomAsync(imageName, customDir);
        
        await ShowWorkflowProgressAsync(3, 3, $"步骤 3/3: 构建并启动容器");
        
        // Step 3: 构建并启动
        var containerResult = await _containerService.BuildAndStartContainerAsync(imageDir);
        
        if (containerResult.Success)
        {
            result.Success = true;
            result.IsComplete = true;
            result.ImageName = imageName;
            result.CustomConfigName = customName;
            result.Messages.Add($"✅ 完整工作流程执行成功");
            result.Messages.Add($"🚀 容器已启动: {containerResult.ContainerName}");
            
            // 更新元数据
            var metadata = new ImageMetadata
            {
                ImageName = imageName,
                CreatedAt = DateTime.UtcNow,
                CreatedBy = Environment.UserName,
                SourceConfig = customDir,
                BuildStatus = BuildStatus.Completed,
                LastStarted = DateTime.UtcNow
            };
            await UpdateImageMetadataAsync(imageDir, metadata);
        }
        else
        {
            result.Errors.Add($"构建失败: {containerResult.ErrorMessage}");
        }
    }

    /// <summary>
    /// 验证compose文件语法
    /// </summary>
    private async Task ValidateComposeFileAsync(string composeFile, ConfigurationStateResult result)
    {
        try
        {
            var content = await _fileSystemService.ReadTextFileAsync(composeFile);
            
            // 基础语法检查
            if (!content.Contains("services:"))
            {
                result.ValidationErrors.Add("compose.yaml 缺少 services 字段");
            }

            if (content.Contains("version:"))
            {
                result.Warnings.Add("建议移除 compose.yaml 中的 version 字段（Podman Compose 不需要）");
            }
        }
        catch (Exception ex)
        {
            result.ValidationErrors.Add($"compose.yaml 读取失败: {ex.Message}");
        }
    }
}