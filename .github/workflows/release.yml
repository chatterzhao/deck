name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build-release:
    name: Build Release for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: linux
            arch: x64
            runs-on: ubuntu-latest
            runtime: linux-x64
            executable-suffix: ''
            package-format: 'tar.gz'
          - os: linux
            arch: arm64
            runs-on: ubuntu-latest
            runtime: linux-arm64
            executable-suffix: ''
            package-format: 'tar.gz'
          # Windows builds
          - os: windows
            arch: x64
            runs-on: windows-latest
            runtime: win-x64
            executable-suffix: '.exe'
            package-format: 'zip'
          - os: windows
            arch: arm64
            runs-on: windows-latest
            runtime: win-arm64
            executable-suffix: '.exe'
            package-format: 'zip'
          # macOS builds
          - os: macos
            arch: x64
            runs-on: macos-latest
            runtime: osx-x64
            executable-suffix: ''
            package-format: 'zip'
          - os: macos
            arch: arm64
            runs-on: macos-latest
            runtime: osx-arm64
            executable-suffix: ''
            package-format: 'zip'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Get version
      id: version
      shell: bash
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Restore dependencies
      run: dotnet restore

    - name: Build and test
      run: dotnet test --configuration Release

    - name: Publish application
      run: dotnet publish src/Deck.Console/Deck.Console.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true --output ./publish/${{ matrix.os }}-${{ matrix.arch }}

    - name: Publish AOT application (if supported)
      id: aot-publish
      continue-on-error: true
      run: dotnet publish src/Deck.Console/Deck.Console.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true -p:PublishAot=true --output ./publish-aot/${{ matrix.os }}-${{ matrix.arch }}

    - name: Create release package
      shell: bash
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        OS="${{ matrix.os }}"
        ARCH="${{ matrix.arch }}"
        FORMAT="${{ matrix.package-format }}"
        
        # Create release directory
        RELEASE_DIR="deck-${VERSION}-${OS}-${ARCH}"
        mkdir -p "$RELEASE_DIR"
        
        # Copy published files (prefer AOT if available)
        if [ -d "./publish-aot/${{ matrix.os }}-${{ matrix.arch }}" ]; then
          echo "Using AOT build"
          cp -r "./publish-aot/${{ matrix.os }}-${{ matrix.arch }}"/* "$RELEASE_DIR/"
          echo "AOT=true" >> $GITHUB_ENV
        else
          echo "Using standard build"
          cp -r "./publish/${{ matrix.os }}-${{ matrix.arch }}"/* "$RELEASE_DIR/"
          echo "AOT=false" >> $GITHUB_ENV
        fi
        
        # Create package
        if [ "$FORMAT" == "zip" ]; then
          zip -r "${RELEASE_DIR}.zip" "$RELEASE_DIR"
          echo "PACKAGE_FILE=${RELEASE_DIR}.zip" >> $GITHUB_ENV
        else
          tar -czf "${RELEASE_DIR}.tar.gz" "$RELEASE_DIR"
          echo "PACKAGE_FILE=${RELEASE_DIR}.tar.gz" >> $GITHUB_ENV
        fi
        
        # Generate checksums
        if command -v sha256sum >/dev/null 2>&1; then
          sha256sum "$PACKAGE_FILE" > "${PACKAGE_FILE}.sha256"
        elif command -v shasum >/dev/null 2>&1; then
          shasum -a 256 "$PACKAGE_FILE" > "${PACKAGE_FILE}.sha256"
        fi
        
        echo "RELEASE_DIR=$RELEASE_DIR" >> $GITHUB_ENV

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          ${{ env.PACKAGE_FILE }}
          ${{ env.PACKAGE_FILE }}.sha256

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Prepare release files
      run: |
        mkdir -p ./release-files
        find ./artifacts -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" | xargs -I {} cp {} ./release-files/
        ls -la ./release-files

    - name: Generate release notes
      id: release-notes
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        cat > release-notes.md << EOF
        # Deck .NET Console v${VERSION}
        
        🎉 **新版本发布！**
        
        Deck .NET 版本基于 .NET 9 构建，提供跨平台原生性能支持。
        
        ## ✨ 主要特性
        
        - 🎯 **交互式体验优化** - 所有需要参数的命令支持无参数交互式选择
        - 🔗 **三层统一管理** - \`deck images\` 系列统一管理Deck配置+Podman镜像+容器
        - 🧠 **智能清理系统** - 不同层级选择对应不同的清理策略和警告机制
        - 🚀 **AOT原生性能** - .NET 9 AOT编译，启动迅速，低资源占用
        
        ## 📦 支持平台
        
        - Windows (x64, ARM64)
        - Linux (x64, ARM64)  
        - macOS (Intel x64, Apple Silicon ARM64)
        
        ## 🔽 下载说明
        
        1. 根据您的系统选择对应的压缩包
        2. 解压后运行安装脚本或直接使用可执行文件
        3. AOT版本提供更快的启动速度和更小的内存占用
        
        ## 📋 变更日志
        
        请查看提交历史了解详细变更内容。
        EOF
        
        echo "RELEASE_NOTES_FILE=release-notes.md" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Deck .NET Console ${{ steps.version.outputs.VERSION }}
        body_path: ${{ steps.release-notes.outputs.RELEASE_NOTES_FILE }}
        files: ./release-files/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}