name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build-and-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact-name: linux-x64
            runtime: linux-x64
          - os: windows-latest
            artifact-name: windows-x64
            runtime: win-x64
          - os: macos-latest
            artifact-name: macos-x64
            runtime: osx-x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: dotnet test --no-build --configuration Release --logger trx --results-directory "TestResults-${{ matrix.os }}"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.artifact-name }}
        path: TestResults-${{ matrix.os }}/*.trx

    - name: Publish application (Standard)
      run: dotnet publish src/Deck.Console/Deck.Console.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true --output ./publish/${{ matrix.artifact-name }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deck-${{ matrix.artifact-name }}
        path: ./publish/${{ matrix.artifact-name }}

  aot-build:
    name: AOT Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: build-and-test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact-name: linux-x64-aot
            runtime: linux-x64
          - os: windows-latest
            artifact-name: windows-x64-aot
            runtime: win-x64
          - os: macos-latest
            artifact-name: macos-x64-aot
            runtime: osx-x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Publish AOT application
      run: dotnet publish src/Deck.Console/Deck.Console.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true -p:PublishAot=true -p:PublishSingleFile=true -p:PublishTrimmed=true -p:InvariantGlobalization=true --output ./publish-aot/${{ matrix.artifact-name }}

    - name: Upload AOT artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deck-aot-${{ matrix.artifact-name }}
        path: ./publish-aot/${{ matrix.artifact-name }}

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, aot-build]
    if: always()

    steps:
    - name: Check build results
      run: |
        echo "Build and test job result: ${{ needs.build-and-test.result }}"
        echo "AOT build job result: ${{ needs.aot-build.result }}"
        
        if [[ "${{ needs.build-and-test.result }}" == "failure" ]]; then
          echo "❌ Build and test failed"
          exit 1
        elif [[ "${{ needs.aot-build.result }}" == "failure" ]]; then
          echo "⚠️  AOT build failed, but regular build succeeded"
          echo "This is acceptable for MVP release"
        else
          echo "✅ All builds succeeded"
        fi