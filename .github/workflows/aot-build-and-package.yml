name: AOT Build and Package

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]

permissions:
  contents: write
  packages: write
  deployments: write

env:
  DOTNET_SDK_VERSION: 9.0.x
  PROJECT_PATH: src/Deck.Console/Deck.Console.csproj
  BUILD_DIR: build/release
  DIST_DIR: dist

jobs:
  aot-build-and-package:
    name: AOT Build and Package (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Validate project structure
      shell: bash
      run: |
        echo "🔍 Validating .NET project structure..."
        
        # Check required files one by one
        files=("src/Deck.Console/Deck.Console.csproj" "src/Deck.Console/Program.cs" "src/Deck.Core/Deck.Core.csproj" "src/Deck.Services/Deck.Services.csproj" "scripts/build.sh" "scripts/package.sh" "scripts/package.ps1")
        
        for file in "${files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "❌ Missing required file: $file"
            exit 1
          fi
        done
        
        echo "✅ Project structure validation passed"

    - name: Set up environment for macOS
      if: runner.os == 'macOS'
      run: |
        # macOS uses system builtin pkgbuild, no additional packages needed
        echo "macOS environment ready - using builtin pkgbuild for PKG creation"

    - name: Set up environment for Linux
      if: runner.os == 'Linux'
      run: |
        # Linux creates TAR.GZ packages, no additional packages needed
        echo "Linux environment ready - using builtin tar for TAR.GZ creation"

    - name: Set up environment for Windows
      if: runner.os == 'Windows'
      run: |
        # Install Microsoft C++ Build Tools and Windows SDK for AOT compilation
        echo "Installing Microsoft C++ Build Tools and Windows SDK..."
        choco install visualstudio2022buildtools --package-parameters '--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows11SDK.22000 --add Microsoft.VisualStudio.Component.VC.Redist.14.Latest' -y
        
        # Install WiX Toolset v4 for MSI package creation
        echo "Installing WiX Toolset v4 globally..."
        dotnet tool install --global wix --version 4.0.5
        
        # Refresh PATH to include dotnet tools
        $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
        
        # Verify WiX installation with detailed diagnostics
        echo "Verifying WiX installation..."
        echo "PATH contents:"
        $env:PATH -split ';' | Where-Object { $_ -like "*dotnet*" -or $_ -like "*tools*" } | ForEach-Object { echo "  $_" }
        
        echo "Global .NET tools location:"
        if (Test-Path "$env:USERPROFILE\.dotnet\tools") {
          echo "  $env:USERPROFILE\.dotnet\tools exists"
          Get-ChildItem "$env:USERPROFILE\.dotnet\tools" -Name
        }
        
        echo "Testing WiX command availability:"
        try {
          wix --version
          echo "✅ WiX command successful"
        } catch {
          echo "❌ WiX command failed: $_"
          echo "Trying direct path..."
          & "$env:USERPROFILE\.dotnet\tools\wix.exe" --version
        }
        
        # Verify other development tools
        echo "Verifying Windows development environment..."
        where link.exe || echo "Link.exe not found in PATH"
        if (Test-Path "C:\Program Files (x86)\Windows Kits\10\Lib") { echo "Windows SDK found" } else { echo "Windows SDK not found" }
        if (Test-Path "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC") { echo "MSVC Build Tools found" } else { echo "MSVC Build Tools not found" }
        echo "Windows environment ready for AOT compilation and MSI packaging"

    - name: AOT Build and Package
      shell: bash
      run: |
        # Extract version from tag name, removing 'v' prefix if present
        TAG_VERSION="${GITHUB_REF_NAME#v}"
        
        echo "🚀 Building Deck .NET v${TAG_VERSION} with AOT optimizations..."
        
        # Make scripts executable first
        chmod +x scripts/build.sh scripts/package.sh scripts/validate-version.sh 2>/dev/null || true
        
        # Validate version consistency
        ./scripts/validate-version.sh "v${TAG_VERSION}"
        
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          # Windows PowerShell version - use two-step approach with fallback
          echo "📦 Step 1: Running build script with AOT..."
          if ! pwsh -Command "& '.\scripts\build.ps1' -Version '${TAG_VERSION}' -Configuration Release -Aot"; then
            echo "⚠️  AOT build failed, trying standard build..."
            pwsh -Command "& '.\scripts\build.ps1' -Version '${TAG_VERSION}' -Configuration Release"
          fi
          
          echo "📦 Step 2: Running package script..." 
          pwsh -Command "& '.\scripts\package.ps1' -Version '${TAG_VERSION}' -Configuration Release"
        else
          # Unix/Linux/macOS bash version - use two-step approach
          echo "📦 Step 1: Running build script..."
          ./scripts/build.sh --version "${TAG_VERSION}" --configuration Release --aot
          
          echo "📦 Step 2: Running package script..."
          ./scripts/package.sh --version "${TAG_VERSION}" --configuration Release
        fi
        
        echo "✅ Build and packaging completed"

    - name: Verify AOT packages
      shell: bash
      run: |
        # Verify package types by platform
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          PKG_COUNT=$(find ${{ env.DIST_DIR }} -name "*.pkg" | wc -l)
          if [ $PKG_COUNT -gt 0 ]; then
            echo "✅ macOS PKG packages found: $PKG_COUNT"
            # Verify PKG contents include uninstall script
            for pkg in $(find ${{ env.DIST_DIR }} -name "*.pkg"); do
              echo "📋 Checking PKG contents: $pkg"
              pkgutil --payload-files "$pkg" | grep -q "deck-uninstall" && echo "✅ Uninstall script included" || echo "⚠️  Uninstall script missing"
            done
          else
            echo "❌ No PKG packages found for macOS"
            exit 1
          fi
            
        elif [[ "$RUNNER_OS" == "Linux" ]]; then
          TAR_COUNT=$(find ${{ env.DIST_DIR }} -name "*.tar.gz" | wc -l)
          if [ $TAR_COUNT -gt 0 ]; then
            echo "✅ Linux TAR.GZ packages found: $TAR_COUNT"
          else
            echo "❌ No TAR.GZ packages found for Linux"
            exit 1
          fi
            
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          MSI_COUNT=$(find ${{ env.DIST_DIR }} -name "*.msi" | wc -l)
          if [ $MSI_COUNT -gt 0 ]; then
            echo "✅ Windows MSI packages found: $MSI_COUNT"
          else
            echo "❌ No MSI packages found for Windows"
            echo "MSI package creation is required for Windows distribution"
            exit 1
          fi
        fi

    - name: Upload AOT package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aot-package-${{ runner.os }}
        path: ${{ env.DIST_DIR }}/
        if-no-files-found: error

  release-aot:
    name: Create AOT Release Packages
    needs: aot-build-and-package
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all AOT package artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./aot-artifacts

    - name: List all AOT artifacts
      run: |
        find ./aot-artifacts -type f

    - name: Upload AOT release assets
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        name: "Deck .NET ${{ github.ref_name }} - AOT Optimized Release"
        body: |
          ## Deck .NET ${{ github.ref_name }} - AOT Optimized Release
          
          高性能的 .NET AOT 优化版本，包含以下平台的预编译二进制文件：
          
          ### 📦 包含的包
          - **Windows**: MSI 安装包 (x64, ARM64)
          - **macOS**: PKG 安装包 (x64, ARM64)  
          - **Linux**: TAR.GZ 压缩包 (x64)
          
          ### ⚡ AOT 优化特性
          - 启动时间更快
          - 内存占用更低
          - 无需 .NET Runtime
          - 单文件部署
          
          ### 🚀 安装方式
          1. 下载对应平台的安装包
          2. Windows: 双击 MSI 文件安装
          3. macOS: 双击 PKG 文件安装
          4. Linux: 解压 TAR.GZ 到目标目录`tar -xzf Deck-${{ github.ref_name }}-linux-x64.tar.gz -C /usr/local/bin/`

          ### 卸载方式
          1. Windows: 打开Windows 控制面板，选择“程序” -> 找到“Deck - xx” -> “卸载”
          2. macOS: 终端执行命令`deck-uninstall`
          3. Linux: 终端执行命令`rm -rf /usr/local/bin/deck`
        files: |
          ./aot-artifacts/aot-package-*/**/*-${{ github.ref_name }}-*.msi
          ./aot-artifacts/aot-package-*/**/*-${{ github.ref_name }}-*.pkg
          ./aot-artifacts/aot-package-*/**/*-${{ github.ref_name }}-*.tar.gz
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}